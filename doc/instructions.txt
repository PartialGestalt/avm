# AVM machine entities

##
## A avm program is a fixed sequence of identifiers of arbitrary size.
## AVM is big-endian.
##
## 
##

##
## Identifiers.
##
## All entities in the avm are identified by a 32-bit value, where the
## highest-order byte defines the type of entity.  The lower 24-bits are
## defined according to type.
##

##
## Entity types (classes)
##
0x00 Instruction -- Command or operation
0x01 Error       -- Errors/exceptions
0x02 Group       -- Group of entities
0x03 Register    -- Simple fixed-width container
0x04 Buffer      -- Bytewise memory buffer of arbitrary size.
0x05 Port        -- I/O port.
0x06 String      -- Character array
0x07 Label       -- Program label
0x08 Process     -- Thread ID
0x09 Number      -- Numeric variable
0x0A Immediate   -- Constant numeric value
0x0B Segment     -- Program segment
0x0C Unresolved  -- An unresolved entity
0xFF Reserved    -- Invalid value.


##
## Instructions.
##
## Although 8-bit values are represented here, the 
## instruction is a full 32-bit value, with the opcode
## as bits 16-23.  Note that
## the compiler supports commands that are not
## instruction mnemonics.
## The "code" value below is probably wrong.
##
#-----------------------------------------------
#            GROUP 1: Core instructions 
#-----------------------------------------------
# code   mnemonic   #args  description
#-----------------------------------------------
0x00     NOP        0      No-op.  Does nothing.
 n/a     DEF        2      Defines a new entity in the system.
                           (Args: type, type-specific value)
0x02     STOR       2      Places a value in a location.  Specific operation
                           is type-dependent.  Always stores by value.
                           (Args: <loc>,<what>)
                           If <loc> is of type:
                             Group -- add <what> as a member of group
                             Register -- replace register contents with <what>
                             Buffer -- Replace buffer contents with value of <what>
                             String -- Replace string contents with value of <what>
0x03     INS        3      Insert a value at a given offset in a location. Not valid
                           for all <loc> types.
                           (Args: <loc>,<offset>,<what>)
0x04     GOTO       1      Unconditional jump to the given label.
         JMP        1      Alias for GOTO
0x05     JZ         2      Jump to label in 2nd arg if 1st arg is zero.
                           (Args: <label>,<test>)
0x06     JNZ        2
0x07     FORK       1      Creates a new processing thread.  Each thread has 
                           its own stack and set of registers, but all threads
                           share all other elements.  The arg is a location to
                           store the PID of the newly-created thread.  The new
                           thread will see a zero in this location instead.
0x08     KILL       1      Stop a thread.   (Delivers a KILL exception)
0x09     PUSH       1      Push a value onto the stack
0x0A     POP        1      Pop a value off the stack
0x0B     WIDTH      2      Assign a bitwidth to a register or a bytewidth to a buffer
                           or string
                           (Args: <target>, <width>)
#-----------------------------------------------
#            GROUP 2: Math and boolean
#-----------------------------------------------
# code   mnemonic   #args  description
#-----------------------------------------------
0x10     ADD        3      Adds the numeric values of the first two args, and places
                           the result in the location described by the third.
                           (Args: <val1>,<val2>,<loc>);
                           If <loc> is not provided, the result is placed
                           in val1.  If <val2> is not provided, 1 is assumed.
0x11     SUB        3      Subtracts <val2> from <val1>, and places the result
                           in <loc>.
                           (Args: <val1>,<val2>,<loc>);
                           If <loc> is not provided, the result is placed
                           in val1.  If <val2> is not provided, 1 is assumed.
         INC        1      Alias for ADD with a single argument
         DEC        1      Alias for SUB with a single argument
0x12     MUL
0x13     DIV
0x14     POW
0x15     OR 
0x16     AND
0x17     CMP        3      Compare the first two args and place the result in the third.
#-----------------------------------------------
#            GROUP 3: Buffer and Port
#-----------------------------------------------
# code   mnemonic   #args  description
#-----------------------------------------------
0x20     FILE       2      Open a file as a buffer or port
                           (Args: <target>,<filename>)
0x21     IN         3      Consume the next set of bytes from a buffer or port
                           (Args: <where>,<#bytes>, <into>)
0x22     OUT        3      Append/emit a set of bytes to a buffer or port
                           (Args: <where>,<#bytes>, <from>)
0x23     SIZE       2      Get the size of 1st arg and place in 2nd
                           (Args: <what>, <where>)
